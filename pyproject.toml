[tool.poetry]
name = "pypackage_template"
version = "0.0.0"  # Placeholder for dynamic versioning
description = "A fully featured Python package template that supports CI/CD, testing, and sphinx documentation"
authors = ["Marcus Sherman <m.sherman@northeastern.edu>"]
readme = "README.md"
packages = [{include = "pypackage_template", from = "src"}]
license = "MIT"
documentation = "https://pypackage-template.readthedocs.io"
repository = "https://github.com/betteridiot/pypackage_template"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/betteridiot/pypackage_template/issues"
"Documentation" = "https://pypackage-template.readthedocs.io"
"Source Code" = "https://github.com/betteridiot/pypackage_template"

[tool.poetry.scripts]
pypackage_template = "pypackage_template.cli:main"
run-checks = "scripts.run_checks:main"
install-dev = "scripts.install_dev:main"

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-doctestplus = "^1.0"
pytest-timeout = "^2.1"
pytest-xdist = "^3.3"
pytest-sugar = "^0.9.7"
# Linting and Formatting
black = "^23.12"
mypy = "^1.8"
flake8 = "^6.1"
flake8-docstrings = "^1.7"
flake8-bugbear = "^23.3"
flake8-comprehensions = "^3.14"
flake8-pytest-style = "^1.7"
pre-commit = "^3.5"
# Type checking
types-setuptools = "^69.0.0"
typing-extensions = "^4.9.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0"
sphinx-rtd-theme = "^1.3"
sphinx-autodoc-typehints = "^1.24"
sphinxcontrib-napoleon = "^0.7"
myst-parser = "^2.0.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-doctestplus = "^1.0"
pytest-timeout = "^2.1"
pytest-xdist = "^3.3"
pytest-sugar = "^0.9.7"

[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
build = "^1.0"
twine = "^4.0"

[build-system]
requires = [
    "poetry-core>=1.0.0",
    "poetry-dynamic-versioning>=1.0.0,<2.0.0"
]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
pattern = "^(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?"
format = "{base}"
format-jinja = """
    {%- if distance == 0 -%}
        {{- base -}}
    {%- else -%}
        {{- base }}.dev{{ distance }}+{{ commit }}
    {%- endif -%}
"""
dirty = true
tag-branch = "main"

[virtualenvs]
in-project = true
create = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    --cov=src/pypackage_template \
    --cov-report=term-missing \
    --cov-report=html \
    --cov-report=xml \
    --cov-branch \
    --doctest-modules \
    --doctest-continue-on-failure \
    --verbosity=2 \
    --strict-markers \
    --strict-config \
    --durations=10 \
    --timeout=300 \
    -n auto
"""
testpaths = ["tests", "src"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*", "*Tests"]
required_plugins = [
    "pytest-cov",
    "pytest-doctestplus",
    "pytest-timeout",
    "pytest-xdist"
]
markers = [
    "slow: marks tests as slow",
    "integration: marks integration tests",
    "unit: marks unit tests",
    "e2e: marks end-to-end tests",
    "api: marks API tests",
    "parametrize: marks parametrized tests"
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
    "DONT_ACCEPT_TRUE_FOR_1"
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::ImportWarning"
]

[tool.coverage.run]
branch = true
source = ["src"]
parallel = true
concurrency = ["multiprocessing", "thread"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass"
]
ignore_errors = true
fail_under = 90
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
^/docs/
^/build/
^/dist/
^/.git/
^/.tox/
^/.venv/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
skip = ["docs/", "build/", "dist/", ".tox/", ".venv/"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "pytest.*",
    "numpy.*",
    "pandas.*",
    "setuptools.*",
    "sphinx.*"
]
ignore_missing_imports = true

[tool.sphinx-pyproject]
project = "pypackage_template"
copyright = "2025"
author = "Marcus Sherman"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx_autodoc_typehints",
    "myst_parser"
]
html_theme = "sphinx_rtd_theme"

[tool.bandit]
exclude_dirs = ["tests", "docs"]
targets = ["src"]
